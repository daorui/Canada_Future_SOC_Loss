library(terra)
library(lubridate)
library(sf)
library(dplyr)
library(spData)
library(zoo)
library(ggplot2)
library(viridis)
library(tidyr)
library(dplyr)
library(readxl)
library(hrbrthemes)
library(viridis)
library(PupillometryR)
library(scales)
library(ggpmisc)
library(RColorBrewer)
quadrotic_data <- readRDS('/mnt/DataSpace/Projects/Canada_C/processed_output/CMIP6_LAI_to_GDD5_and_Observation_relationship_removeland15_ssp245.rds')[[3]]#1 quadrotic 2 gaussian 3 sigmoid 4 exp
quadratic_df <- do.call(rbind,quadrotic_data)
quadratic_df$model <- factor(quadratic_df$model,
levels = c('ACCESS-ESM1-5','BCC-CSM2-MR','CanESM5','CanESM5-1','CESM2-WACCM',
'EC-Earth3-CC','EC-Earth3-Veg','EC-Earth3-Veg-LR','INM-CM4-8','INM-CM5-0',
'IPSL-CM6A-LR','TaiESM1','Observation'))
cols <- c(colorRampPalette(brewer.pal(8,'Set1'))(length(unique(quadratic_df$model))-1),
'black')
names(cols) <- levels(quadratic_df$model)
theme0 <- theme(axis.text = element_text(face = 'bold',family = 'Times',size=16),
axis.text.x.bottom = element_text(face = 'bold',margin=margin(10,00,0,0)),
axis.title.y.left = element_text(family = 'Times',size=18,margin=margin(0,10,0,0)),
axis.title.x.bottom = element_text(family = 'Times',size=18,margin=margin(10,10,0,0)),
panel.border = element_rect(
colour = "black",
size   = 2,
fill   = NA ),
axis.ticks.x.top = element_blank(),
axis.ticks.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
plot.background = element_blank(),
rect = element_rect(fill = "transparent"),
legend.position = 'right',
legend.direction = "verticle",
legend.box = "verticle",
legend.box.just = "top",
legend.text = element_text(family = 'Times'),
legend.title = element_text(family = 'Times'),
legend.spacing.y = unit(0, "cm"),
title = element_text(family = 'Times',size = 20)
)
#
#
mod_u <- c('ACCESS-ESM1-5','BCC-CSM2-MR','CanESM5','CanESM5-1','CAS-ESM2-0','CESM2-WACCM',
'EC-Earth3-CC','EC-Earth3-Veg','EC-Earth3-Veg-LR','INM-CM4-8','INM-CM5-0',
'IPSL-CM6A-LR','TaiESM1')
mod_u <- mod_u[-5]
#
cmip6_esm <- quadratic_df %>% filter(model %in% mod_u)
observation <- quadratic_df %>% filter(model %in% 'Observation')
cols <- c(colorRampPalette(brewer.pal(8,'Set1'))(length(unique(quadratic_df$model))-1),
'black')
names(cols) <- levels(quadratic_df$model)
### in order to share legend key
##
csoil00 <- c('ACCESS-ESM1-5','BCC-CSM2-MR','CanESM5','CESM2-WACCM','CMCC-ESM2','EC-Earth3-CC','EC-Earth3-Veg','EC-Earth3-Veg-LR','GFDL-ESM4','IPSL-CM6A-LR','TaiESM1')
model_all <- c(unique(c(mod_u,csoil00)),'Observation')
model_all <- c('ACCESS-ESM1-5','BCC-CSM2-MR','CanESM5','CanESM5-1','CESM2-WACCM','EC-Earth3-CC','EC-Earth3-Veg','EC-Earth3-Veg-LR','INM-CM4-8','INM-CM5-0','IPSL-CM6A-LR','TaiESM1','CMCC-ESM2','GFDL-ESM4','Observation')
cols <- setNames(c(colorRampPalette(brewer.pal(10,'Paired'))(length(model_all)-1),
'black'),model_all)
shapes <- setNames(c(4:15,17,18,16),model_all)
linetypes <- setNames(c(2:15,1),model_all)
pgdd <-
ggplot() +
geom_point(data = cmip6_esm, aes(
x = GDD,
# y = LAI_quad,
y = LAI_sigmoid,
group = model,
shape = model,
col = model
),alpha = 0.4) +
geom_line(data = cmip6_esm, aes(
x = GDD,
# y = LAI_quad,
y = LAI_sigmoid,
group = model,
linetype=model,
col = model
),lwd =1.2 ) +
geom_line(data = observation, aes(
x = GDD,
# y = LAI_quad,
y = LAI_sigmoid,
# group = model,
linetype='Observation',
col = 'Observation',
),lwd =2 ) +
geom_point(data = observation, aes( #keep shape observation in legend
x = GDD,
# y = LAI_quad,
y = LAI_sigmoid,
# group = model,
shape='Observation',
col = 'Observation',
) ) +
scale_color_manual(values = cols  ) + #赋值 colors
scale_linetype_manual(values = linetypes) +
scale_shape_manual(values = shapes) +
# scale_color_manual(values = c(setNames(colorRampPalette(brewer.pal(8,'Set1'))(length(unique(cmip6_esm$model))),unique(cmip6_esm$model)),#setname 里的
#                               Observation = 'black')
#                    # labels = c(cmip6_esm$model,'Observation')
# ) + #赋值 colors
# scale_linetype_manual(values = c(setNames(2:c(length(unique(cmip6_esm$model))+1), unique(cmip6_esm$model)),
#                                  Observation = 1)
#                       # labels = c(cmip6_esm$model,'Observation')
# ) +
# scale_shape_manual(values = c(setNames(1:12,unique(cmip6_esm$model)),#setname 里的
#                               Observation = 21)) +
labs(x = 'GDD5 (\u00B0C)',y=expression('LAImax ('~m^2~m^-2~')'),
col ='ESM',linetype='ESM',shape = '') +
guides(
# 设置图例列数
shape = guide_legend(
title = 'ESM',
label = FALSE,                   # 不显示 label
override.aes = list(size = 2.5),   # 设置图例中点大小
order = 1
),
linetype = guide_legend(
title = '',
label = TRUE,
override.aes = list(size = 1.2),
order = 2
),col = guide_legend(
title = '',
label = TRUE,
#override.aes = list(size = 1.2),
order = 2
)) +
scale_x_continuous(
# name = "Weight (1000 lbs)",
sec.axis = dup_axis()
) +
scale_y_continuous(
# name = "Miles per Gallon",
limits = c(0,4.5),
sec.axis = dup_axis()
) +
theme_bw() + theme(
legend.position = "right",
legend.box      = "horizontal",
legend.spacing.x = unit(0.01, "pt"),    # 控制左右间距
legend.title = element_text(size = 10,family = 'Times'),
legend.text  = element_text(size = 9,family ='Times'),
legend.box.margin = margin(t=0,r=-10,b=0,l=-10,unit = 'pt'),
axis.text = element_text(face = 'bold',family = 'Times',size=16),
axis.text.x.bottom = element_text(face = 'bold',margin=margin(10,00,0,0)), #MARGIN TOP RIGHT BOTTOM LEFT
axis.title.y.left = element_text(family = 'Times',size=18,margin=margin(0,10,0,0)),
axis.title.x.bottom = element_text(family = 'Times',size=18,margin=margin(10,10,0,0)),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.border = element_rect(           # 绘图区边框
colour = "black",
size   = 2,                             # 粗细 = 1
fill   = NA ),                            # 保持内部透明
axis.ticks.x.top = element_blank(),
axis.ticks.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
plot.background = element_blank(),
rect = element_rect(fill = "transparent"),
#legend.position = "bottom",
#legend.position = "inside", # if put inside, then order of scenario to be 1
#legend.position.inside = c(0.05,0.15), #relative position
# legend.position = c(0.6,0.12),
# legend.justification = 'left',
# legend.direction = "verticle",
# legend.box = "verticle", # if more than one legend then use these
# legend.box.just = "top", # centre
# legend.text = element_text(family = 'Times'),
# legend.title = element_text(family = 'Times'),
# legend.spacing.y = unit(0, "cm"),
title = element_text(family = 'Times',size = 20)
)
pgdd + theme(plot.margin = margin(t = 5.5, r = 8, b = 8, l = 18,unit = 'pt')) + theme(legend.position = 'none')
slope00 <- readRDS('/mnt/DataSpace/Projects/Canada_C/processed_output/CMIP6_LAI_to_GDD5_and_Observation_relationship_slopemax_removeland15_ssp245.rds')[[3]]
slope01 <- as.data.frame(matrix(unlist(slope00),ncol=2,byrow = T))
names(slope01) <- c('Slopemax','model')
slope01$source <- factor(c(rep('ESM',nrow(slope01)-1),'Observation'))
slope01$Slopemax <- round(as.numeric(slope01$Slopemax),4)
slope01$model <- factor(slope01$model,levels = unique(slope01$model))
slope01$ID <- as.numeric(slope01$source)
median(slope01$Slopemax)
mean(c(slope01$Slopemax[c(1,2,5,11,12)],mean(slope01$Slopemax[c(3,4)]),mean(slope01$Slopemax[c(6:8)]),mean(slope01$Slopemax[c(9,10)])))
median(c(slope01$Slopemax[c(1,2,5,11,12)],mean(slope01$Slopemax[c(3,4)]),mean(slope01$Slopemax[c(6:8)]),mean(slope01$Slopemax[c(9,10)])))
slope_fig3b <-
ggplot() +
geom_boxplot(data = slope01, aes(x = source, y = Slopemax * 1000),
col=c('maroon','black'),cex=1) +
geom_point(
data = slope01,
aes(x = source, y = Slopemax *1000, shape = model,col = model),
position = position_jitter(width = 0.15, seed = 5),
# width = 0.15,    # 控制抖动点在水平方向的散开程度
show.legend = F,
alpha = 1,
stroke = 0.5,
size = 3.5
) +
scale_shape_manual(values = shapes) +
scale_color_manual(values = cols) +
labs(x = ' ',y=expression(Max~omega~" ("*"×"*10^-3~m^2~m^-2~degree*C^-1*")"),
col ='ESM',shape='ESM') +
# 设置图例列数
guides(col = guide_legend(ncol = 3),  # 设置颜色图例为2列
linetype = guide_legend(ncol = 3)) +  # 设置线型图例为2列
scale_y_continuous(
# name = "Miles per Gallon",
limits = c(0,18),
breaks = c(0,4,8,12,16)
) +
theme_bw()  + #theme(panel.grid = element_blank())  +
theme(legend.position = "right",
legend.box      = "horizontal",
legend.spacing.x = unit(0.01, "pt"),    # 控制左右间距
legend.title = element_text(size = 10,family = 'Times'),
legend.text  = element_text(size = 9,family ='Times'),
legend.box.margin = margin(t=0,r=-10,b=0,l=-10,unit = 'pt'),
axis.text = element_text(face = 'bold',family = 'Times',size=16),
axis.text.x.bottom = element_text(face = 'bold',margin=margin(10,00,0,0)), #MARGIN TOP RIGHT BOTTOM LEFT
axis.title.y.left = element_text(family = 'Times',size=18,margin=margin(0,0,0,0)),# 为了和fig3 d对齐title ，只能减少right space 值
axis.title.x.bottom = element_text(family = 'Times',size=18,margin=margin(10,10,0,0)),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.border = element_rect(           # 绘图区边框
colour = "black",
size   = 2,                             # 粗细 = 1
fill   = NA ),                            # 保持内部透明
axis.ticks.x.top = element_blank(),
axis.ticks.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
plot.background = element_blank(),
rect = element_rect(fill = "transparent"),
#legend.position = "bottom",
#legend.position = "inside", # if put inside, then order of scenario to be 1
#legend.position.inside = c(0.05,0.15), #relative position
# legend.position = c(0.6,0.12),
# legend.justification = 'left',
# legend.direction = "verticle",
# legend.box = "verticle", # if more than one legend then use these
# legend.box.just = "top", # centre
# legend.text = element_text(family = 'Times'),
# legend.title = element_text(family = 'Times'),
# legend.spacing.y = unit(0, "cm"),
title = element_text(family = 'Times',size = 20))
slope_fig3b
###
df_a <- readRDS('/mnt/DataSpace/Data_pool/CMIP6_cSoil_trend/csoil_rh_turnover_dataframe_withslopes_20250601.rds')
csoil00 <- c('ACCESS-ESM1-5','BCC-CSM2-MR','CanESM5','CESM2-WACCM','CMCC-ESM2',
'EC-Earth3-CC','EC-Earth3-Veg','EC-Earth3-Veg-LR','GFDL-ESM4','IPSL-CM6A-LR',
'TaiESM1')
two_slopes <- df_a[[2]]
# Q₁₀ = exp[ |Eₐ/R| × 10/(T₁×T₂) ]
# R语言验证计算
calculate_Q10 <- function(slope, T_low_C = 0, T_high_C = 10,cond = 'Warmer') {
if(cond == 'Warmer'){
# 转换温度为开尔文
T1 <- T_low_C + 273.15
T2 <- T_high_C + 273.15
} else {# 转换温度为开尔文
T1 <- T_low_C + 273.15 -10
T2 <- T_high_C + 273.15 -10
}
# 计算Q₁₀
exp(abs(slope) * 10 / (T1 * T2))
}
slopes <- two_slopes$Warmer
slopes <- two_slopes$Cooler
Q10_values_w <- sapply(two_slopes$Warmer, calculate_Q10,cond='Warmer')
plot(Q10_values_w);abline(h=2,lty= 2,col='maroon',lwd=2)
Q10_values_c <- sapply(two_slopes$Cooler, calculate_Q10,cond='Cooler')
plot(Q10_values_c);abline(h=2,lty= 2,col='maroon',lwd=2)
Q10s <- data.frame(Q10_W = Q10_values_w,Q10_C= Q10_values_c,model = c(csoil00[c(1,3:11)],'Observation')) %>%
pivot_longer(data = .,cols = starts_with('Q10'),values_to = 'Q10',names_to = 'T')
Q10s %>% filter(T == 'Q10_W') %>% slice(c(1:10)) %>% pull('Q10') %>% median()
Q10s %>% filter(T == 'Q10_C') %>% slice(c(1:10)) %>% pull('Q10') %>% median()
t1 <- Q10s %>% filter(T == 'Q10_W') %>% slice(c(1:4,8:10))
t2 <- Q10s %>% filter(T == 'Q10_W') %>% slice(c(5:7))
mean(c(t1$Q10,t2$Q10))
median(c(t1$Q10,t2$Q10))
t1 <- Q10s %>% filter(T == 'Q10_C') %>% slice(c(1:4,8:10))
t2 <- Q10s %>% filter(T == 'Q10_C') %>% slice(c(5:7))
mean(c(t1$Q10,t2$Q10))
median(c(t1$Q10,t2$Q10))
####
df_int <- df_a[[1]] %>% mutate(model = factor(model,levels = c(csoil00[c(1,3:11)],'Observation')))
df_pred <- df_a[[3]] %>% mutate(model = factor(model,levels = c(csoil00[c(1,3:11)],'Observation')))
head(df_int,2)
head(Q10s)
esm_model <- csoil00[c(1,3:11)]
logKK3 <-
ggplot() +
geom_point(aes(x = invTK, y = log_k,
group = model,
shape = model,
col=model),data = df_int) +
geom_line(aes(x = invTK, y = predicted_k,
group = model,
col=model),data = df_pred, linewidth = 1.5) +
geom_vline(xintercept=1/273.15,linetype=2,linewidth = 1.2,col='maroon') +
annotate('text',label = '0 (\u00B0C)',x = 1/271,y = -5.9,size = 6, family = 'Times') +
annotate('text',label = c('Warmer','Colder'),x = c(1/278.15,1/268.15),
y = -6.25,size =8,family = 'Times') +
annotate('segment',x = 1/273.15, xend = 1/271.6,y = -6.2,yend = -6.05,col='maroon',
size = 1,arrow = arrow(length = unit(0.2, "cm"), type = "closed")) +
labs( y = expression("ln k (yr"^{-1}*")"),
x = expression("Inverse mean annual temperature (1/T, K"^{-1}*")"),
col ='ESM',shape = 'ESM',linetype='ESM') +
scale_color_manual(values = cols) +
scale_shape_manual(values = shapes) +
scale_linetype_manual(values = shapes) +
# scale_color_manual(
#   values = c(
#     setNames(
#       colorRampPalette(brewer.pal(10, "Paired"))(10),
#       esm_model),
#     Observation = "black"),
#   breaks = c(unique(esm_model),'Observation'),
#   labels = c(unique(esm_model),'Observation')
# ) +
# scale_shape_manual(
#   values = c(setNames(1:10, unique(esm_model)),
#              Observation = 16),
#   breaks = c(unique(esm_model),'Observation'),
#   labels = c(unique(esm_model),'Observation')
# ) +
# scale_linetype_manual(
#   values = c(setNames(1:10, unique(esm_model)),
#              Observation = 1),
#   breaks = c(unique(esm_model),'Observation'),
#   labels = c(unique(esm_model),'Observation')
# ) +
theme_classic() +
scale_x_continuous(
# name = "Weight (1000 lbs)",
sec.axis = dup_axis()
) +
scale_y_continuous(
# name = "Miles per Gallon",
limits = c(-6.5,-2),
breaks = c(-2,-4,-6),
sec.axis = dup_axis()
) +
theme_bw() +
theme(panel.grid = element_blank()) +
theme(axis.text = element_text(face = 'bold',family = 'Times',size=16),
axis.text.x.bottom = element_text(face = 'bold',margin=margin(10,00,0,0)), #MARGIN TOP RIGHT BOTTOM LEFT
axis.title.y.left = element_text(family = 'Times',size=18,margin=margin(0,0,0,0)),#原来0，10，0，0，现在为了和fig3 a对齐只能缩小
axis.title.x.bottom = element_text(family = 'Times',size=18,margin=margin(10,10,0,0)),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
axis.line.x.bottom = element_line(size=1,color = "black"),
axis.line.y.left = element_line(size=1,color = "black"),
axis.line.x.top = element_line(size=1,color = 'black'),
axis.line.y.right = element_line(size=1,color = 'black'),
axis.ticks.x.top = element_blank(),
axis.ticks.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
plot.background = element_blank(),
rect = element_rect(fill = "transparent"),
#legend.position = "bottom",
#legend.position = "inside", # if put inside, then order of scenario to be 1
#legend.position.inside = c(0.05,0.15), #relative position
legend.position = c(0.85,0.7),
# legend.justification = 'left',
#legend.direction = "horizontal",
legend.box = "horizontal", # if more than one legend then use these
legend.box.just = "top", # centre
legend.text = element_text(family = 'Times'),
legend.title = element_text(family = 'Times'),
legend.spacing.y = unit(0, "cm"),
title = element_text(family = 'Times',size = 20)
)
logKK3
logKK3
######################___________________________________________________________
head(Q10s)
Q10s <- Q10s %>% mutate(Source = c(rep('ESM',20),rep('Observation',2)),
xnum = as.numeric(factor(T)),
model = factor(model,levels = unique(Q10s$model)))
Q10_fig3d <-
ggplot() +
geom_boxplot(aes(x=T,y=Q10),data = Q10s %>% filter(Source =='ESM'),
col = scales::alpha(c('#048eca','#f55c39'),alpha = 0.7),
size = 1) +
geom_jitter(aes(x=xnum,
y=Q10,
shape = model,
col= model
),data = Q10s %>% filter(Source =='ESM'),
width = 0.06,
alpha = 0.5,
stroke = 0.5,
size = 3.5
) +
geom_hline(yintercept = 2,linetype=4,linewidth = 0.8,col = 'grey') +
geom_line(aes(x = c(1,2),y = Q10 ),data = Q10s %>%
filter(Source =='ESM') %>% group_by(T) %>%
summarise(Q10 = median(Q10),.groups = 'drop') %>% as.data.frame(),
# linetype = 6,
size = 2,col = 'maroon') +
geom_point(aes(x = xnum,y = Q10,shape = model,col = model),size =3.5,
data = Q10s %>% filter(Source =='Observation')) +
geom_line(aes(x = xnum,y = Q10),data = Q10s %>% filter(Source =='Observation'),
linewidth = 2,col = 'black') +
labs( y = expression(Q[10]), #expression("Q10 (yr"^{-1}*")"),
x = 'Regions',#expression("Inverse mean annual temperature (1/T, K"^{-1}*")"),
col ='ESM',shape = 'ESM',linetype='ESM') +
scale_shape_manual(values = shapes) +
scale_color_manual(values = cols) +
scale_linetype_manual(values = linetypes) +
# scale_shape_manual(
#   values = c(setNames(c(15:18,25,6:10), unique(esm_model)),
#              Observation = 21),
#   breaks = c(unique(esm_model),'Observation'),
#   labels = c(unique(esm_model),'Observation')
# ) +
# scale_color_manual(
#   values = c(
#     setNames(
#       colorRampPalette(brewer.pal(10, "Paired"))(10),
#       esm_model),
#     Observation = "black"),
#   breaks = c(unique(esm_model),'Observation'),
#   labels = c(unique(esm_model),'Observation')
# ) +
scale_x_discrete(
breaks = c('Q10_C','Q10_W'),
labels = c(expression(paste(Q[10],' colder')),expression(paste(Q[10],' warmer')))
# name = "Weight (1000 lbs)",
# sec.axis = dup_axis()
) +
# scale_y_continuous(
#   # name = "Miles per Gallon",
#   sec.axis = dup_axis()
# ) +
theme_bw() +
theme(panel.grid = element_blank()) +
theme(axis.text = element_text(face = 'bold',family = 'Times',size=16),
axis.text.x.bottom = element_text(face = 'bold',margin=margin(10,00,0,0)), #MARGIN TOP RIGHT BOTTOM LEFT
axis.title.y.left = element_text(family = 'Times',size=18,margin=margin(0,10,0,0)),
axis.title.x.bottom = element_text(family = 'Times',size=18,margin=margin(10,10,0,0)),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.border = element_rect(           # 绘图区边框
colour = "black",
size   = 2,                             # 粗细 = 1
fill   = NA ),                            # 保持内部透明
# axis.line.x.bottom = element_line(size=1,color = "black"),
# axis.line.y.left = element_line(size=1,color = "black"),
# axis.line.x.top = element_line(size=1,color = 'black'),
# axis.line.y.right = element_line(size=1,color = 'black'),
axis.ticks.x.top = element_blank(),
axis.ticks.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank(),
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
plot.background = element_blank(),
rect = element_rect(fill = "transparent"),
#legend.position = "bottom",
#legend.position = "inside", # if put inside, then order of scenario to be 1
#legend.position.inside = c(0.05,0.15), #relative position
legend.position = c(0.85,0.7),
# legend.justification = 'left',
#legend.direction = "horizontal",
legend.box = "horizontal", # if more than one legend then use these
legend.box.just = "top", # centre
legend.text = element_text(family = 'Times'),
legend.title = element_text(family = 'Times'),
legend.spacing.y = unit(0, "cm"),
title = element_text(family = 'Times',size = 20)
)
logKK3
Q10_fig3d + theme(axis.text = element_text(face = 'bold',family = 'Times',size=16))
rm(list=ls())
dev.off()
